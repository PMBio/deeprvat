name: DeepRVAT Pipeline Tests
run-name: DeepRVAT Pipeline Tests üß¨üß™üíªüßë‚Äçüî¨
on: [ push ]

jobs:
  # Config Setup
  Smoke-GenerateConfig-Training:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/run_training.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./example/config/deeprvat_input_training_config.yaml ./example/ 
  
  Smoke-GenerateConfig-Training-AssociationTesting:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/training_association_testing.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./example/config/deeprvat_input_config.yaml ./example/

  Smoke-GenerateConfig-PreTrained:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/association_testing_pretrained.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./example/config/deeprvat_input_pretrained_models_config.yaml ./example/ && ln -s $GITHUB_WORKSPACE/pretrained_models ./example/


  # Training Pipeline
  Smoke-RunTraining:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/run_training.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/training_association_testing/deeprvat_config.yaml ./example/

  Pipeline-Tests-RunTraining:
    needs: [Smoke-RunTraining, Reference-Output-Training]
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/run_training.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/training_association_testing/deeprvat_config.yaml ./example/
      dry_run: false
      download_training_outputs: true
      run_training_results_check: true

  Reference-Output-Training:
    # MOVE TO on pull_request.ready_for_review
    #if: github.event.pull_request.opened == true
    #if: GITHUB_REF == 'refs/pull/PULL_REQUEST_NUMBER/merge' #'refs/heads/master'
    uses: ./.github/workflows/run-pipeline.yml
    with:
      #branch: main
      pipeline_file: ./pipelines/run_training.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/training_association_testing/deeprvat_config.yaml ./example/
      dry_run: false
      upload_training_outputs: true

  Reference-Output-Pretrained:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      branch: main
      pipeline_file: ./pipelines/association_testing_pretrained.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/pretrained/deeprvat_config.yaml ./example/
      dry_run: false
      upload_pretrained_outputs: true
  
  Reference-Output-Pretrained-Regenie:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      branch: main
      pipeline_file: ./pipelines/association_testing_pretrained_regenie.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/regenie/pretrained/deeprvat_config.yaml ./example/
      dry_run: false
      upload_regenie_outputs: true

  # Association Testing Pretrained Pipeline
  Smoke-Association-Testing-Pretrained:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/association_testing_pretrained.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/pretrained/deeprvat_config.yaml ./example/

  Pipeline-Tests-Training-Association-Testing:
    needs: [Smoke-Association-Testing-Pretrained, Reference-Output-Pretrained]
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/association_testing_pretrained.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/pretrained/deeprvat_config.yaml ./example/
      dry_run: false
      download_pretrained_outputs: true
      run_burden_results_check: true
      run_association_results_check: true

  # Association Testing Pretrained Regenie
  Smoke-Association-Testing-Pretrained-Regenie:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/association_testing_pretrained_regenie.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/regenie/pretrained/deeprvat_config.yaml ./example/

  Pipeline-Tests-Association-Testing-Pretrained-Regenie:
    needs: [Smoke-Association-Testing-Pretrained-Regenie, Reference-Output-Pretrained-Regenie]
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/association_testing_pretrained_regenie.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/regenie/pretrained/deeprvat_config.yaml ./example/
      dry_run: false
      download_regenie_outputs: true
      #run_burden_results_check: true
      run_regenie_association_results_check: true

  # Association Testing Training
  Smoke-Association-Testing-Training:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/training_association_testing.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/training_association_testing/deeprvat_config.yaml ./example/

  Pipeline-Tests-Association-Testing-Training:
    needs: Smoke-Association-Testing-Training
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/training_association_testing.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/training_association_testing/deeprvat_config.yaml ./example/
      dry_run: false

  # Association Testing Training Regenie
  Smoke-Association-Testing-Training-Regenie:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/training_association_testing_regenie.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/regenie/training_association_testing/deeprvat_config.yaml ./example/

  Pipeline-Tests-Training-Association-Testing-Regenie:
    needs: Smoke-Association-Testing-Training-Regenie
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/training_association_testing_regenie.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/deeprvat/regenie/training_association_testing/deeprvat_config.yaml ./example/
      dry_run: false

  # Seed Gene Discovery
  Smoke-Seed-Gene-Discovery:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/seed_gene_discovery.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/seed_gene_discovery/sg_discovery_config.yaml ./example/

  Pipeline-Tests-Seed-Gene-Discovery:
    needs: Smoke-Seed-Gene-Discovery
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/seed_gene_discovery.snakefile
      environment_file: ./deeprvat_env_no_gpu.yml
      prerun_cmd: cp ./tests/seed_gene_discovery/sg_discovery_config.yaml ./example/
      dry_run: false
      

  # Preprocessing With QC
  Smoke-Preprocessing-With-QC:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/preprocess_with_qc.snakefile
      environment_file: ./deeprvat_preprocessing_env.yml
      pipeline_directory: ./example/preprocess
      pipeline_config: ./example/config/deeprvat_preprocess_config.yaml
      download_fasta_data: true
      fasta_download_path: ./example/preprocess/workdir/reference

  Pipeline-Tests-Preprocessing-With-QC:
    needs: Smoke-Preprocessing-With-QC
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/preprocess_with_qc.snakefile
      environment_file: ./deeprvat_preprocessing_env.yml
      pipeline_directory: ./example/preprocess
      pipeline_config: ./example/config/deeprvat_preprocess_config.yaml
      dry_run: false
      download_fasta_data: true
      fasta_download_path: ./example/preprocess/workdir/reference

  # Preprocessing-No-QC
  Smoke-Preprocessing-No-QC:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/preprocess_no_qc.snakefile
      environment_file: ./deeprvat_preprocessing_env.yml
      pipeline_directory: ./example/preprocess
      pipeline_config: ./example/config/deeprvat_preprocess_config.yaml
      download_fasta_data: true
      fasta_download_path: ./example/preprocess/workdir/reference

  Pipeline-Tests-Preprocessing-No-QC:
    needs: Smoke-Preprocessing-No-QC
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/preprocess_no_qc.snakefile
      environment_file: ./deeprvat_preprocessing_env.yml
      pipeline_directory: ./example/preprocess
      pipeline_config: ./example/config/deeprvat_preprocess_config.yaml
      dry_run: false
      download_fasta_data: true
      fasta_download_path: ./example/preprocess/workdir/reference

  # Annotation Pipeline
  Smoke-Annotation-Pipeline:
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/annotations.snakefile
      environment_file: ./deeprvat_annotations.yml
      prerun_cmd: |
        mkdir -pv ./example/preprocess/workdir/norm/variants && \
        mkdir -pv ./example/preprocess/workdir/preprocessed && \
        touch ./example/preprocess/workdir/preprocessed/genotypes.h5 && \
        touch ./example/preprocess/workdir/norm/variants/variants.parquet
      pipeline_config: ./example/config/deeprvat_annotation_config.yaml
      pipeline_directory: ./example/annotations
      download_fasta_data: true
      fasta_download_path: ./example/annotations/reference

  Pipeline-Annotation:
    needs: Smoke-Annotation-Pipeline
    uses: ./.github/workflows/run-pipeline.yml
    with:
      pipeline_file: ./pipelines/annotations.snakefile
      environment_file: ./deeprvat_annotations.yml
      prerun_cmd: |
        mkdir ./example/annotations/repo_dir && \
        bash deeprvat/annotations/setup_annotation_workflow.sh ./example/annotations/repo_dir faatpipe && \
        wget https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_44/gencode.v44.annotation.gtf.gz \
        -O ./example/annotations/reference/gencode.v44.annotation.gtf.gz
      pipeline_directory: ./example/annotations
      pipeline_config: ./example/config/deeprvat_annotation_config_minimal.yaml
      dry_run: false
      download_fasta_data: true
      fasta_download_path: ./example/annotations/reference